/*
 * File: app/view/InvoiceItemPanel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('WINK.view.InvoiceItemPanel', {
    extend: 'Ext.form.Panel',
    alias: 'widget.mycontainer10',
    requires: [
        'Ext.Label',
        'Ext.field.Number',
        'Ext.field.Select',
        'Ext.Button'
    ],
    loadItem: function(item) {
        this.setRecord(item);
        var productField = this.down('label[winkname=productname]');
       
        item.getFkproduct_idproduct({
            callback: function(product, operation) {
                productField.setHtml(product.get('name'));
            }
        });
        
    },
    config: {
        invoiceItemIndex: 0,
        border: '0 0 1 0',
        height: 60,
        style: 'border-style:solid; border-color:darkgrey',
        scrollable: false,
        layout: {
            type: 'hbox',
            align: 'center'
        },
        items: [
            {
                xtype: 'label',
                flex: 1,
                baseCls: 'Product Name',
                html: '',
                margin: '0 2 0 5',
                style: 'font-size:20px; font-family:"open sans"',
                width: 235,
                winkname: 'productname'
            },
            {
                xtype: 'numberfield',
                name: 'product_idproduct',
                hidden: false
            },
            {
                xtype: 'numberfield',
                cls: 'inputBorder',
                margin: '0 2 0 0',
                style: 'borderInput',
                width: 100,
                clearIcon: false,
                inputCls: 'inputAmount',
                value: 999,
                maxValue: 999,
                minValue: -999,
                stepValue: 1,
                name: 'qty'
            },
            {
                xtype: 'numberfield',
                cls: 'inputBorder',
                margin: '0 2 0 0',
                style: 'borderInput',
                width: 100,
                clearIcon: false,
                inputCls: 'inputAmount',
                value: '9,999.99',
                autoComplete: false,
                autoCorrect: true,
                maxValue: 999999,
                minValue: 0,
                stepValue: 0.01,
                name: 'unitprice'
            },
            {
                xtype: 'selectfield',
                cls: 'inputBorder',
                margin: '0 2 0 0',
                style: 'borderInput',
                width: 100,
                displayField: 'code',
                store: 'TaxCodeStore',
                usePicker: false,
                valueField: 'id',
                name: 'taxcode_idtaxcode'
            },
            {
                xtype: 'numberfield',
                cls: 'inputBorderDisabled',
                margin: '0 2 0 0',
                style: 'borderInput',
                width: 100,
                clearIcon: false,
                inputCls: 'inputAmount',
                value: '9,999.99',
                autoComplete: true,
                readOnly: true,
                maxValue: 999999,
                minValue: -999999,
                stepValue: 0.01
            },
            {
                xtype: 'button',
                height: 40,
                margin: '0 2 0 2',
                ui: 'decline-small',
                width: 50,
                text: 'Del'
            }
        ]
    },
    initialize: function() {
        this.callParent();
        if (this.invoiceItemIndex % 2 === 0) {
            this.setStyle("background: #000000;");
        }
    }

});