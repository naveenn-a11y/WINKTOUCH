/*
 * File: app/view/InvoicePanel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('WINK.view.InvoicePanel', {
    extend: 'Ext.form.Panel',
    alias: 'widget.InvoicePanel',
    requires: [
        'WINK.view.InvoiceItemPanel',
        'WINK.view.InvoiceSummary',
        'Ext.tab.Panel',
        'Ext.field.Text',
        'Ext.Button',
        'Ext.SegmentedButton',
        'Ext.Label',
        'Ext.tab.Bar',
        'Ext.form.Panel',
        'WINK.view.ProductSearchResultsPanel'
    ],
    deliver: function() {
        this.getInvoiceSummary().down('datepickerfield[name=delivereddate]').setValue(new Date());
        this.save();
    },
    isDirty:function(){
        
    },
    save: function() {

    },
    pay: function() {

    },
    delete: function() {

    },
    email: function() {
        this.save();
    },
    print: function() {
        this.save();
    },
    isFullyLoaded: function() {
        if (!this.isPaymentsLoaded)
            return false;
        if (!this.isInvoiceItemsLoaded)
            return false;
        return this.isPaymentsLoaded && this.isInvoiceItemsLoaded;
    },
    loadPatientInvoice: function(patientinvoice) {
        this.setMasked(true);
        this.isPaymentsLoaded = false;
        this.isInvoiceItemsLoaded = false;
        this.patientinvoice = patientinvoice;
        var itemsContainer = this.getInvoiceItemsContainer();
        this.clearInvoiceItemsContainer();
        this.setRecord(patientinvoice);

        var invoiceIdLabel = this.down('label[name=id]');
        if (patientinvoice.get('id') === 0)
        {
            invoiceIdLabel.setHtml('New Invoice');
        } else {
            invoiceIdLabel.setHtml("i" + patientinvoice.get('id'));
        }
        this.getInvoiceSummary().loadPatientInvoice(patientinvoice);
        var patientinvoiceitemsStore = patientinvoice.patientinvoiceitems_patientinvoice_idpatientinvoice();
        var patientpaymentsStore = patientinvoice.patientpayments_patientinvoice_idpatientinvoice();
        patientinvoiceitemsStore.load({
            scope: this,
            callback: function(records, operation, success) {
                console.log('Loaded invoice items ');
                this.itemsLoaded();
            }
        });
        patientpaymentsStore.load({
            scope: this,
            callback: function(records, operation, success) {
                console.log('Loaded invoice payments ');
                this.paymentsLoaded();
            }
        });
        this.unmask();
    },
    itemsLoaded: function() {
        this.clearInvoiceItemsContainer();
        var patientinvoice = this.patientinvoice;
        var itemsContainer = this.getInvoiceItemsContainer();
        var patientinvoiceitemsStore = patientinvoice.patientinvoiceitems_patientinvoice_idpatientinvoice();
        patientinvoiceitemsStore.each(function(item, index, length) {

            var invoiceItemPanel = Ext.create('WINK.view.InvoiceItemPanel');

            if (!this.invoiceitems)
                this.invoiceitems = [];

            this.invoiceitems[index] = invoiceItemPanel;
            itemsContainer.add(invoiceItemPanel);
            invoiceItemPanel.loadItem(item);
        }, this);
        this.isInvoiceItemsLoaded = true;
        if (this.isFullyLoaded())
            this.unmask();
    },
    paymentsLoaded: function() {
        var patientinvoice = this.patientinvoice;
        var patientpaymentsStore = patientinvoice.patientpayments_patientinvoice_idpatientinvoice();
        this.isPaymentsLoaded = true;
        if (this.isFullyLoaded())
            this.unmask();
    },
    getInvoiceSummary: function() {

        return this.down('InvoiceSummary');
    },
    getInvoiceItemsContainer: function() {
        return this.down('container[winkname=invoiceitemscontainer]');
    },
    clearInvoiceItemsContainer: function() {
        this.getInvoiceItemsContainer().removeAll(true, false);
        this.invoiceitems = [];
    },
    deleteItem: function(item) {


        for (var i = 0; i < this.invoiceitems.length; i++) {
            if (this.invoiceitems[i] === item) {
                this.invoiceitems.splice(i, 1);
                this.getInvoiceItemsContainer().remove(item);
                break;
            }

        }

        this.updateSummary();
    },
    getListedUnitPrice: function(product, idStore) {
        var listedUnitPrice = 0;
        var prd = this.getProductRetailDetails(product, idStore);
        if (prd)
            listedUnitPrice = prd.get('retailpriceto');

        console.log('returning:' + listedUnitPrice);

        return listedUnitPrice;
    },
    getCurrentStoreId: function() {
        var selectedStore = this.getInvoiceSummary().down('selectfield[name=store_idstore]').getRecord();
        return selectedStore.get('id');
    },
    getOrderDate: function() {
        return this.getInvoiceSummary().down('datepickerfield[name=orderdate]').getValue();
    },
    getProductRetailDetails: function(product, idStore) {
        idStore = idStore || this.getCurrentStoreId();
        var prd = null;
        var retailDetailsStore = product.productretaildetails_product_idproduct();

        retailDetailsStore.each(function(retail, index, length) {
            console.log('lookgin for retail price:' + retail.get('store_idstore') + " " + retail.get('retailpriceto'));

            if ((retail.get('store_idstore') === 0) || (retail.get('store_idstore') === idStore))
            {
                prd = retail;
                if (retail.get('store_idstore') === idStore) {
                    return;
                }
            }
        }, this);
        return prd;
    },
    getTaxCodeId: function(product) {
        var temp = this.getProductRetailDetails(product);
        if (!temp)
            return null;
        return temp.get('taxcode_idtaxcode');
    },
    addProductToInvoice: function(product, barcode) {

        var defaultUnitPrice = this.getListedUnitPrice(product, this.getCurrentStoreId());
        console.log('default price is:' + defaultUnitPrice);
        var itemsContainer = this.getInvoiceItemsContainer();
        var idbarcode = null;
        if (barcode)
            idbarcode = barcode.get('id');
        var idTaxCode = this.getTaxCodeId(product);
        console.log('Tax Code ID is:' + idTaxCode);

        var newInvoiceItem = Ext.create('WINK.model.PatientInvoiceItem', {
            qty: 1,
            product_idproduct: product.get('idProduct'),
            fkproduct_idproduct: product,
            prediscount_unitprice: defaultUnitPrice,
            barcode_idbarcode: idbarcode,
            fkbarcode: barcode,
            taxcode_idtaxcode: idTaxCode
        });

        console.log('newInvoiceItem unit price is:' + newInvoiceItem.get('prediscount_unitprice'));

        var invoiceItemPanel = Ext.create('WINK.view.InvoiceItemPanel');

        if (!this.invoiceitems)
            this.invoiceitems = [];

        this.invoiceitems[this.invoiceitems.length] = invoiceItemPanel;
        this.getInvoiceContainer().setActiveItem(itemsContainer); //this needs to be done before we load the item (because of the activate event)
        itemsContainer.add(invoiceItemPanel); //this needs to be done before we load the item (because of the activate event)
        invoiceItemPanel.loadItem(newInvoiceItem);
        invoiceItemPanel.recalculateTax();
        this.down('textfield[winkname=searchProductField]').setValue('');
    },
    getSubtotal: function() {

        var subtotal = 0;
        if (this.invoiceitems)
            for (var i = 0; i < this.invoiceitems.length; i++) {
                console.log('invoicePanel getSubtTotal():' + i + " of " + this.invoiceitems.length + " = " + subtotal);
                subtotal += this.invoiceitems[i].getSubtotal();
            }
        console.log("invoicePanel getSubtTotal() sum " + subtotal);

        return subtotal;
    },
    getTax1: function() {

        var t = 0;
        if (this.invoiceitems)
            for (var i = 0; i < this.invoiceitems.length; i++) {
                t += this.invoiceitems[i].getTax1();
            }
        return t;
    },
    getTax2: function() {

        var t = 0;
        if (this.invoiceitems)
            for (var i = 0; i < this.invoiceitems.length; i++) {
                t += this.invoiceitems[i].getTax2();
            }
        return t;
    },
    getInsurancePortion: function() {

        var t = 0;

        return t;
    },
    getPatientPaymentsTotal: function() {

        var t = 0;

        return t;
    },
    getTax1Name: function() {

        var name = null;
        if (this.invoiceitems)
            for (var i = 0; i < this.invoiceitems.length; i++) {
                var temp = this.invoiceitems[i].getTax1Name();
                if (temp && temp.trim().length > 0)
                {
                    if (name && name.length > 0)
                    {
                        if (name.toUpperCase() === temp.trim().toUpperCase())
                        {

                        } else {
                            name = "Tax 1";
                            break;
                        }
                    } else {
                        name = temp.trim();
                    }
                }
            }

        return name || 'Tax 1';
    },
    getTax2Name: function() {

        var name = null;
        if (this.invoiceitems)
            for (var i = 0; i < this.invoiceitems.length; i++) {
                var temp = this.invoiceitems[i].getTax2Name();
                if (temp && temp.trim().length > 0)
                {
                    if (name && name.length > 0)
                    {
                        if (name.toUpperCase() === temp.trim().toUpperCase())
                        {

                        } else {
                            name = "Tax 2";
                            break;
                        }
                    } else {
                        name = temp.trim();
                    }
                }
            }

        return name || 'Tax 2';
    },
    updateSummary: function() {
        this.getInvoiceSummary().updateSummary();
    },
    getInvoiceContainer: function() {
        return this.down('container[winkname=invoicecontainer]');
    },
    getSearchProductsContainer: function() {
        if (!this.searchProductsContainer)
        {
            this.searchProductsContainer = Ext.create('WINK.view.ProductSearchResultsPanel');

        }
        this.getInvoiceContainer().setActiveItem(this.searchProductsContainer);
        return this.searchProductsContainer;
    },
    searchProducts: function() {
        var searchProductField = this.down('textfield[winkname=searchProductField]');
        var v = searchProductField.getValue();
        if ((v != null) && (v.trim().length > 0))
        {
            console.log('looking for products with ' + searchProductField);
            this.getSearchProductsContainer().find(v);
        }
    },
    config: {
        layout: 'hbox',
        centered: false,
        // modal: false,
        scrollable: false,
        items: [
            {
                xtype: 'tabpanel',
                flex: 1,
                id: 'invoiceTabPanel',
                itemId: 'invoiceTabPanel',
                items: [
                    {
                        xtype: 'container',
                        title: 'Invoice',
                        iconCls: 'info',
                        layout: 'vbox',
                        items: [
                            {
                                xtype: 'container',
                                border: '0 0 1 0',
                                height: 50,
                                style: 'background:rgb(215,224,231); border-style:solid; border-color: darkgrey;',
                                layout: {
                                    type: 'hbox',
                                    align: 'center'
                                },
                                items: [
                                    {
                                        xtype: 'label',
                                        name: 'id',
                                        readOnly: true,
                                        html: '',
                                        margin: '0 2 0 20',
                                        style: 'font-size:15px; font-family:"open sans"',
                                    }

                                ]


                            },
                            {
                                xtype: 'container',
                                border: '1 0 0 0',
                                height: 65,
                                layout: 'hbox',
                                items: [
                                    {
                                        xtype: 'container',
                                        flex: 0,
                                        border: '0 1 0 0',
                                        padding: '0 30 0 10',
                                        style: 'background:rgb(222,238,252); border-style:solid; border-color: darkgrey;',
                                        layout: {
                                            type: 'hbox',
                                            align: 'center',
                                            pack: 'center'
                                        },
                                        items: [
                                            {
                                                xtype: 'textfield',
                                                cls: 'inputBorder',
                                                height: 40,
                                                margin: '2 0 2 2',
                                                width: 200,
                                                label: '',
                                                placeHolder: 'Item',
                                                winkname: 'searchProductField'
                                            },
                                            {
                                                xtype: 'button',
                                                cls: 'buttonSquare',
                                                height: 45,
                                                margin: '2 2 2 0',
                                                ui: 'action',
                                                text: 'Search',
                                                handler: function(btn) {
                                                    var temp = btn.up('InvoicePanel').searchProducts();
                                                }
                                            },
                                            {
                                                xtype: 'button',
                                                cls: 'buttonSquare',
                                                height: 45,
                                                itemId: 'mybutton58',
                                                margin: '0 0 0 5',
                                                ui: 'confirm',
                                                text: 'Favorites',
                                                hidden: true
                                            }
                                        ]
                                    },
                                    {
                                        xtype: 'container',
                                        flex: 1,
                                        border: 0,
                                        padding: '0 0 0 10',
                                        style: 'background:#DDE9D2; border-style:solid; border-color: darkgrey;',
                                        layout: {
                                            type: 'hbox',
                                            align: 'center'
                                        },
                                        items: [
                                            {
                                                xtype: 'segmentedbutton',
                                                margin: '0 0 0 5',
                                                allowToggle: false,
                                                hidden: true,
                                                items: [
                                                    {
                                                        xtype: 'button',
                                                        itemId: 'mybutton17',
                                                        text: '+ Rx'
                                                    },
                                                    {
                                                        xtype: 'button',
                                                        text: '+ CL'
                                                    }
                                                ]
                                            },
                                            {
                                                xtype: 'segmentedbutton',
                                                margin: '5 5 5 5',
                                                allowToggle: false,
                                                items: [
                                                    {
                                                        xtype: 'button',
                                                        text: 'Camera'
                                                    },
                                                    {
                                                        xtype: 'button',
                                                        text: 'Attachment',
                                                        hidden: true
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                xtype: 'container',
                                border: '1 0 1 0',
                                style: 'background:rgb(248,248,248); border-style:solid; border-color: darkgrey;',
                                layout: 'hbox',
                                items: [
                                    {
                                        xtype: 'label',
                                        flex: 1,
                                        html: '',
                                        margin: '5 2 5 5'
                                    },
                                    {
                                        xtype: 'label',
                                        html: 'Qty',
                                        margin: '5 2 0 0',
                                        width: 100
                                    },
                                    {
                                        xtype: 'label',
                                        html: 'Unit Price',
                                        margin: '5 2 0 0',
                                        width: 100
                                    },
                                    {
                                        xtype: 'label',
                                        html: 'Tax',
                                        margin: '5 2 0 0',
                                        width: 100
                                    },
                                    {
                                        xtype: 'label',
                                        html: 'Discount',
                                        margin: '5 2 0 0',
                                        width: 100
                                    },
                                    {
                                        xtype: 'label',
                                        html: 'Total',
                                        margin: '5 2 0 0',
                                        width: 100
                                    },
                                    {
                                        xtype: 'label',
                                        html: '',
                                        margin: '5 2 0 0',
                                        width: 50
                                    }
                                ]
                            },
                            {
                                xtype: 'container',
                                flex: 1,
                                scrollable: false,
                                style: 'background-color: #ffffff; border-style:solid!important; border:1px; border-color: darkgrey;',
                                winkname: 'invoicecontainer',
                                layout: {
                                    type: 'card',
                                    animation: 'slide'
                                },
                                items: [
                                    {
                                        xtype: 'container',
                                        style: 'background-color: #ffffff; border-style:solid!important; border:1px; border-color: darkgrey;',
                                        layout: {
                                            type: 'vbox'
                                        },
                                        scrollable: 'vertical',
                                        winkname: 'invoiceitemscontainer'
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        xtype: 'container',
                        title: 'Job Status',
                        iconCls: 'info'
                    },
                    {
                        xtype: 'container',
                        title: 'New CL',
                        iconCls: 'info'
                    }
                ],
                tabBar: {
                    docked: 'bottom',
                    ui: 'light'
                }
            },
            {
                xtype: 'InvoiceSummary'
            }
        ],
        listeners: [
            {
                fn: 'onMybutton17Tap',
                event: 'tap',
                delegate: '#mybutton17'
            }
        ]
    },
    onMybutton17Tap: function(button, e, eOpts) {
        var newSheet = new WINK.view.RxWorksheetPanel({title: "New Rx"});
        var tabPanel = Ext.getCmp("invoiceTabPanel");
        tabPanel.add(newSheet);
    }

});