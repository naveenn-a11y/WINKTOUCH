/*
 * File: app/view/InvoicePanel.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.4.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.4.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('WINK.view.InvoicePanel', {
    extend: 'Ext.form.Panel',
    alias: 'widget.InvoicePanel',
    requires: [
        'WINK.view.InvoiceItemPanel',
        'WINK.view.InvoiceSummary',
        'WINK.view.AddPaymentPanel',
        'Ext.tab.Panel',
        'Ext.field.Text',
        'Ext.Button',
        'Ext.SegmentedButton',
        'Ext.Label',
        'Ext.tab.Bar',
        'Ext.form.Panel',
        'WINK.view.ProductSearchResultsPanel'
    ],
    deliver: function() {
        this.getInvoiceSummary().down('datepickerfield[name=delivereddate]').setValue(new Date());
        this.save();
    },
    isDirty: function() {

    },
    saveSuccess: function(previousInvoiceId, newId) {
        //this is called after the invoice is saved and after the invoice is emailed (if applicable)

        var me = this;
        var historyPanel = me.up('PatientHistoryPanel');
        var patientInvoiceClass = Ext.ModelManager.getModel('WINK.model.PatientInvoice');
        console.info("calling load:" + patientInvoiceClass + " " + newId);
        patientInvoiceClass.load(newId, {
            scope: this,
            failure: function(record, operation) {
                console.info("InvoicePanel.save().PatientInvoice.load().failure()");
            },
            success: function(record, operation) {
                var savedpatientinvoice = record;
                console.info("InvoicePanel.save().PatientInvoice.load().success()");
                console.info("InvoicePanel.save().PatientInvoice.load():" + newId + " " + savedpatientinvoice.get('id'));
                if (newId !== previousInvoiceId)
                {
                    console.info(previousInvoiceId + ' !== ' + newId);
                    if (historyPanel)
                    {
                        console.info("calling historyPanel.updateInvoiceId()");
                        historyPanel.updateInvoiceId(previousInvoiceId, savedpatientinvoice);
                    }

                } else {
                    console.info(previousInvoiceId + ' = ' + newId);
                }
                console.info(document.location.href);
                if (document.location.href.indexOf('#newquicksale') >= 0)
                {
                    document.location.href = '#invoice/' + savedpatientinvoice.get('id'); //calls the WINK.Utilities.hideWorking();

                } else {
                    me.loadPatientInvoice(savedpatientinvoice); //calls the WINK.Utilities.hideWorking();
                    if (historyPanel)
                    {
                        console.info('historyPanel.invoiceSaved()');
                        historyPanel.invoiceSaved(me);
                    }
                }
            }
        });
    },
    saveSuccessEmail: function(previousInvoiceId,emailAddress){
          var me = this;
        var patientinvoice = this.patientinvoice;
           var newId = patientinvoice.get('id');
       Ext.Ajax.request({
                        url: WINK.Utilities.getRestURL() + 'patientinvoices/email/' + newId + "/"+emailAddress,
                        method: 'GET',
                        withCredentials: true,
                        useDefaultXhrHeader: false,
                        cors: true,
                        success: function(response) {

                            me.saveSuccess(previousInvoiceId, newId);
                        },
                        failure: function(response) {
                            me.saveSuccess(previousInvoiceId, newId);
                        },
                        callback: function(options, success, response) {


                        }

                    });  
    },
    setPatientHistoryPanel:function(patientHistoryPanel){
        this.patientHistoryPanel=patientHistoryPanel;
    },
    getPatientHistoryPanel:function(){
        if( this.patientHistoryPanel)
            return  this.patientHistoryPanel;
        return this.up('PatientHistoryPanel');
    },
    getPatientEmailAddress: function(){
        return this.getPatientHistoryPanel().getEmailAddress();
    },
    save: function(email) {
        WINK.Utilities.showWorking();
        email = email || false;
        this.updateInvoiceModel();
        var me = this;
        var patientinvoice = this.patientinvoice;
        var previousInvoiceId = this.patientinvoice.get('id');
        var historyPanel = me.up('PatientHistoryPanel');
        console.info('InvoicePanel.save() before Ajax, historyPanel:' + historyPanel + " " + this.patientinvoice.get('delivereddate'));
        this.patientinvoice.save({
            success: function(response) {
                console.info('save invoice success');
                console.info('historyPanel:' + historyPanel);
                var newId = patientinvoice.get('id');
                console.info(previousInvoiceId + " vs " + patientinvoice.get('id'));
                //TODO this could be better with less calls to the server (Especially  document.location.href =..._)
                var patientInvoiceClass = Ext.ModelManager.getModel('WINK.model.PatientInvoice');
                if (email)
                {
                    
                    console.info("emailing invoice : " + newId);
                    var patientEmail = me.getPatientEmailAddress();
                    
                    if(me.isQuicksale() || !patientEmail  || patientEmail.length===0){
                        Ext.Msg.prompt("Email","Enter Patient's Email Address.", function(text){
                            
                            me.saveSuccessEmail(previousInvoiceId,text);
                        });
                    }else{
                        me.saveSuccessEmail(previousInvoiceId,patientEmail);
                    }
                   
                } else {
                    me.saveSuccess(previousInvoiceId, newId);
                }



            },
            failure: function(response) {

                WINK.Utilities.hideWorking();
                WINK.Utilities.showAjaxError('Save Invoice', response);
            },
            callback: function(options, success, response) {

            }

        });
    },
    pay: function() {
        var addPaymentPanel = Ext.create('WINK.view.AddPaymentPanel');
        Ext.Viewport.add(addPaymentPanel);
        addPaymentPanel.setPatientInvoicePanel(this);
    },
    addPayment: function(patientpaymentpanel) {
        var patientinvoice = this.patientinvoice;
        if (!this.payments)
            this.payments = [];
        this.payments[this.payments.length] = patientpaymentpanel;
        this.getPaymentsContainer().add(patientpaymentpanel);
        this.updateNoPaymentsPanel();
        this.updateSummary();
        this.save();
    },
    deleteInvoice: function() {
        alert('not implemented');
    },
    email: function() {
        this.save(true);
    },
    print: function() {
        this.save();
    },
    isFullyLoaded: function() {
        if (!this.isPaymentsLoaded)
            return false;
        if (!this.isInvoiceItemsLoaded)
            return false;
        return this.isPaymentsLoaded && this.isInvoiceItemsLoaded;
    },
    updatePaymentsModel: function() {
        var temp = [];
        for (var i = 0; i < this.payments.length; i++)
        {
            console.log('updatePaymentsModel() ' + i);
            temp.push(this.payments[i].updateModel());
        }
        return temp;
    },
    updateItemsModel: function() {
        var temp = [];
        for (var i = 0; i < this.invoiceitems.length; i++)
        {
            console.log('InvoicePanel.updateItemsModel() i=' + i);
            temp.push(this.invoiceitems[i].updateModel());
        }
        console.log('InvoicePanel.updateItemsModel() length ' + temp.length);
        return temp;
    },
    updateInvoiceModel: function() {
        console.log('InvoicePanel.updateInvoiceModel()');
        var temp = this.getInvoiceSummary().getValues();
        for (var i = 0; i < temp.length; i++)
        {
            console.log(i + " " + temp[0]);
        }

        this.patientinvoice.set(temp);
        var paymentsStore = this.patientinvoice.patientpayments_patientinvoice_idpatientinvoice();
        var invoiceItemsStore = this.patientinvoice.patientinvoiceitems_patientinvoice_idpatientinvoice();
        var rxWorksheetStore = this.patientinvoice.rxworksheets_patientinvoice_idpatientinvoice();
        paymentsStore.setData(this.updatePaymentsModel());
        invoiceItemsStore.setData(this.updateItemsModel());
        console.log('InvoicePanel.updateInvoiceModel() count of items' + invoiceItemsStore.getCount());
        invoiceItemsStore.each(function(childRecord) {
            console.log("InvoicePanel.updateInvoiceModel invoiceItemsStore.each():" + childRecord);
        });
        return this.patientinvoice;
    },
    isQuicksale: function() {
        if (!this.patientinvoice.get('patient_idpatient') || this.patientinvoice.get('patient_idpatient') === 0)
        {
            return true;
        }
        return false;
    },
    loadPatientInvoice: function(patientinvoice) {
        WINK.Utilities.showWorking();
        this.patientinvoice = patientinvoice;
        console.log('InvoicePanel.loadPanelInvoice() ' + patientinvoice.get('id'));
        this.isPaymentsLoaded = false;
        this.isInvoiceItemsLoaded = false;
        var itemsContainer = this.getInvoiceItemsContainer();
        this.clearInvoiceItemsContainer();
        this.clearInvoicePaymentsContainer();
        this.removeAttachementCarousel();
        if (this.isQuicksale())
        {
            //quicksale
            if (!patientinvoice.get('delivereddate'))
                patientinvoice.set('delivereddate', patientinvoice.get('orderdate'))

            this.getInvoiceSummary().down('datepickerfield[name=delivereddate]').hide();
            this.getInvoiceSummary().down('datepickerfield[name=promisseddate]').hide();
            this.down('segmentedbutton[winkname=addworksheetbuttons]').hide();
            this.down('toolbar[winkname=quicksaletitlebar]').show();
        } else {
            this.getInvoiceSummary().down('datepickerfield[name=delivereddate]').show();
            this.getInvoiceSummary().down('datepickerfield[name=promisseddate]').show();
            this.down('segmentedbutton[winkname=addworksheetbuttons]').show();
            this.down('toolbar[winkname=quicksaletitlebar]').hide();
        }

        this.setRecord(patientinvoice);
        var invoiceIdLabel = this.down('label[name=id]');
        if (WINK.Utilities.isKeyNull(patientinvoice))
        {
            invoiceIdLabel.setHtml('New Invoice');
        } else {
            invoiceIdLabel.setHtml("i" + patientinvoice.get('id'));
        }
        this.getInvoiceSummary().loadPatientInvoice(patientinvoice);
        var patientinvoiceitemsStore = patientinvoice.patientinvoiceitems_patientinvoice_idpatientinvoice();
        var patientpaymentsStore = patientinvoice.patientpayments_patientinvoice_idpatientinvoice();
        var rxStore = patientinvoice.rxworksheets_patientinvoice_idpatientinvoice();
        var clStore = patientinvoice.clworksheets_patientinvoice_idpatientinvoice();
        patientinvoiceitemsStore.load({
            scope: this,
            callback: function(records, operation, success) {
                console.log('Loaded invoice items ');
                this.itemsLoaded();
            }
        });
        patientpaymentsStore.load({
            scope: this,
            callback: function(records, operation, success) {
                console.log('Loaded invoice payments ');
                this.paymentsLoaded();
            }
        });
        this.removeRxWorksheets();
        rxStore.load({
            scope: this,
            callback: function(records, operation, success) {
                console.log('Loaded rxworksheets ');
                rxStore.each(function(item, index, length) {
                    console.log('invoice rx.each() ' + index);
                    this.addRxWorksheet(item);
                }, this);
            }
        });
        var attachmentsStore = patientinvoice.invoiceattachements_patientinvoice_idpatientinvoice();
        attachmentsStore.load({
            scope: this,
            callback: function(records, operation, success) {
                console.log('Loaded invoice attachments ');
                attachmentsStore.each(function(item, index, length) {
                    console.log('invoice attachments.each() ' + index);
                    item.getFkuploads_iduploads(function(upload, operation) {
                        this.addAttachementToUI(upload);
                    }, this);
                }, this);
            }
        });
    },
    itemsLoaded: function() {
        this.clearInvoiceItemsContainer();
        var patientinvoice = this.patientinvoice;
        var itemsContainer = this.getInvoiceItemsContainer();
        var patientinvoiceitemsStore = patientinvoice.patientinvoiceitems_patientinvoice_idpatientinvoice();
        patientinvoiceitemsStore.each(function(item, index, length) {
            console.log('InvoicePanel.itemsLoaded() patientinvoiceitemsStore.each() ' + index);
            var invoiceItemPanel = Ext.create('WINK.view.InvoiceItemPanel');
            if (!this.invoiceitems)
                this.invoiceitems = [];
            this.invoiceitems[index] = invoiceItemPanel;
            itemsContainer.add(invoiceItemPanel);
            invoiceItemPanel.loadItem(item);
        }, this);
        this.updateNoItemsPanel();
        this.isInvoiceItemsLoaded = true;
        if (this.isFullyLoaded())
        {
            WINK.Utilities.hideWorking();
        }
    },
    updateNoItemsPanel: function() {
        if (this.invoiceitems)
            if (this.invoiceitems.length === 0)
            {
                if (this.noItemsPanelAdded)
                    return;
                this.getInvoiceItemsContainer().add(this.getNoItemsPanel());
                this.noItemsPanelAdded = true;
            } else {
                if (this.noItemsPanelAdded)
                    this.getInvoiceItemsContainer().remove(this.getNoItemsPanel());
                this.noItemsPanel = null;
                this.noItemsPanelAdded = false;
            }
    },
    updateNoPaymentsPanel: function() {
        if (this.payments)
            if (this.payments.length === 0)
            {
                if (this.noPaymentsPanelAdded)
                    return;
                this.getPaymentsContainer().add(this.getNoPaymentsPanel());
                this.noPaymentsPanelAdded = true;
            } else {
                if (this.noPaymentsPanelAdded)
                    this.getPaymentsContainer().remove(this.getNoPaymentsPanel());
                this.noPaymentsPanel = null;
                this.noPaymentsPanelAdded = false;
            }
    },
    getNoPaymentsPanel: function() {
        if (!this.noPaymentsPanel)
        {
            this.noPaymentsPanel = Ext.create('WINK.view.InvoicePaymentPanel', {
                items: [{
                        xtype: 'label',
                        html: 'No Payments Received',
                        margin: '0 5 0 5',
                        style: 'font-size:15px; font-family:"open sans"',
                        height: 20
                    }
                ]
            });
        }
        return   this.noPaymentsPanel;
    }, getNoItemsPanel: function() {
        if (!this.noItemsPanel)
        {
            this.noItemsPanel = Ext.create('WINK.view.InvoicePaymentPanel', {
                items: [{
                        xtype: 'label',
                        html: 'No Items Sold. Look for products to add to the invoice.',
                        margin: '0 5 0 5',
                        style: 'font-size:15px; font-family:"open sans"',
                        height: 20
                    }
                ]
            });
        }
        return   this.noItemsPanel;
    },
    paymentsLoaded: function() {
        this.clearInvoicePaymentsContainer();
        var patientinvoice = this.patientinvoice;
        var paymentsContainer = this.getPaymentsContainer();
        var patientpaymentsStore = patientinvoice.patientpayments_patientinvoice_idpatientinvoice();
        patientpaymentsStore.each(function(item, index, length) {

            var invoicePaymentPanel = Ext.create('WINK.view.InvoicePaymentPanel');
            if (!this.payments)
                this.payments = [];
            this.payments[index] = invoicePaymentPanel;
            paymentsContainer.add(invoicePaymentPanel);
            invoicePaymentPanel.loadItem(item);
        }, this);
        this.updateNoPaymentsPanel();
        this.isPaymentsLoaded = true;
        if (this.isFullyLoaded())
        {
            WINK.Utilities.hideWorking();
        }
    },
    getInvoiceSummary: function() {

        return this.down('InvoiceSummary');
    },
    getPaymentsContainer: function() {
        return this.down('container[winkname=invoicepaymentscontainer]');
    },
    getInvoiceItemsContainer: function() {
        return this.down('container[winkname=invoiceitemscontainer]');
    },
    clearInvoiceItemsContainer: function() {
        this.getInvoiceItemsContainer().removeAll(true, false);
        this.invoiceitems = [];
        this.noItemsPanel = null;
        this.noItemsPanelAdded = false;
    },
    clearInvoicePaymentsContainer: function() {
        this.getPaymentsContainer().removeAll(true, false);
        this.payments = [];
        this.noPaymentsPanel = null;
        this.noPaymentsPanelAdded = false;
    }, deletePayment: function(item) {
        for (var i = 0; i < this.payments.length; i++) {
            if (this.payments[i] === item) {
                this.payments.splice(i, 1);
                this.getPaymentsContainer().remove(item);
                break;
            }

        }
        this.updateNoPaymentsPanel();
        this.updateSummary();
    }, deleteItem: function(item) {


        for (var i = 0; i < this.invoiceitems.length; i++) {
            if (this.invoiceitems[i] === item) {
                this.invoiceitems.splice(i, 1);
                this.getInvoiceItemsContainer().remove(item);
                break;
            }

        }
        this.updateNoItemsPanel();
        this.updateSummary();
    },
    getListedUnitPrice: function(product, idStore) {
        var listedUnitPrice = 0;
        var prd = this.getProductRetailDetails(product, idStore);
        if (prd)
            listedUnitPrice = prd.get('retailpriceto');
        console.log('returning:' + listedUnitPrice);
        return listedUnitPrice;
    },
    getCurrentStoreId: function() {
        var selectedStore = this.getInvoiceSummary().down('selectfield[name=store_idstore]').getRecord();
        return selectedStore.get('id');
    },
    getOrderDate: function() {
        return this.getInvoiceSummary().down('datepickerfield[name=orderdate]').getValue();
    },
    getProductRetailDetails: function(product, idStore) {
        idStore = idStore || this.getCurrentStoreId();
        var prd = null;
        var retailDetailsStore = product.productretaildetails_product_idproduct();
        retailDetailsStore.each(function(retail, index, length) {
            console.log('lookgin for retail price:' + retail.get('store_idstore') + " " + retail.get('retailpriceto'));
            if ((retail.get('store_idstore') == null) || (retail.get('store_idstore') === 0) || (retail.get('store_idstore') === idStore))
            {
                prd = retail;
                if (retail.get('store_idstore') === idStore) {
                    return;
                }
            }
        }, this);
        return prd;
    },
    getTaxCodeId: function(product) {
        var temp = this.getProductRetailDetails(product);
        if (!temp)
            return null;
        return temp.get('taxcode_idtaxcode');
    },
    addProductToInvoice: function(product, barcode) {

        console.log('InvoicePanel.addProductToInvoice() product:');
        console.log(product);
        var defaultUnitPrice = this.getListedUnitPrice(product, this.getCurrentStoreId());
        console.log('default price is:' + defaultUnitPrice);
        var itemsContainer = this.getInvoiceItemsContainer();
        var idbarcode = null;
        if (barcode)
            idbarcode = barcode.get('id');
        var idTaxCode = this.getTaxCodeId(product);
        console.log('Tax Code ID is:' + idTaxCode);
        console.log('Product ID is:' + product.get('id'));
        var newInvoiceItem = Ext.create('WINK.model.PatientInvoiceItem', {
            qty: 1,
            product_idproduct: product.get('id'),
            fkproduct_idproduct: product,
            prediscount_unitprice: defaultUnitPrice,
            barcode_idbarcode: idbarcode,
            fkbarcode: barcode,
            taxcode_idtaxcode: idTaxCode});
        console.log('newInvoiceItem unit price is:' + newInvoiceItem.get('prediscount_unitprice'));
        var invoiceItemPanel = Ext.create('WINK.view.InvoiceItemPanel');
        if (!this.invoiceitems)
            this.invoiceitems = [];
        this.invoiceitems[this.invoiceitems.length] = invoiceItemPanel;
        this.getInvoiceContainer().setActiveItem(itemsContainer); //this needs to be done before we load the item (because of the activate event)
        itemsContainer.add(invoiceItemPanel); //this needs to be done before we load the item (because of the activate event)
        invoiceItemPanel.loadItem(newInvoiceItem);
        invoiceItemPanel.recalculateTax();
        this.updateNoItemsPanel();
        this.down('textfield[winkname=searchProductField]').setValue('');
    },
    getSubtotal: function() {

        var subtotal = 0;
        if (this.invoiceitems)
            for (var i = 0; i < this.invoiceitems.length; i++) {
                console.log('invoicePanel getSubtTotal():' + i + " of " + this.invoiceitems.length + " = " + subtotal);
                subtotal += this.invoiceitems[i].getSubtotal();
            }
        console.log("invoicePanel getSubtTotal() sum " + subtotal);
        return subtotal;
    },
    getTax1: function() {

        var t = 0;
        if (this.invoiceitems)
            for (var i = 0; i < this.invoiceitems.length; i++) {
                t += this.invoiceitems[i].getTax1();
            }
        return t;
    },
    getTax2: function() {

        var t = 0;
        if (this.invoiceitems)
            for (var i = 0; i < this.invoiceitems.length; i++) {
                t += this.invoiceitems[i].getTax2();
            }
        return t;
    },
    getInsurancePortion: function() {

        var t = 0;
        return t;
    },
    getPatientBalance: function() {
        var subtotal = this.getSubtotal();
        var tax1 = this.getTax1();
        var tax2 = this.getTax2();
        var total = subtotal + tax1 + tax2;
        var insurancePortion = this.getInsurancePortion();
        var totalPayments = this.getPatientPaymentsTotal();
        return total - insurancePortion - totalPayments;
    },
    getPatientPaymentsTotal: function() {
        var t = 0;
        if (this.payments)
            for (var i = 0; i < this.payments.length; i++) {
                t += this.payments[i].getAmount();
            }

        return t;
    },
    getTax1Name: function() {

        var name = null;
        if (this.invoiceitems)
            for (var i = 0; i < this.invoiceitems.length; i++) {
                var temp = this.invoiceitems[i].getTax1Name();
                if (temp && temp.trim().length > 0)
                {
                    if (name && name.length > 0)
                    {
                        if (name.toUpperCase() === temp.trim().toUpperCase())
                        {

                        } else {
                            name = "Tax 1";
                            break;
                        }
                    } else {
                        name = temp.trim();
                    }
                }
            }

        return name || 'Tax 1';
    },
    getTax2Name: function() {

        var name = null;
        if (this.invoiceitems)
            for (var i = 0; i < this.invoiceitems.length; i++) {
                var temp = this.invoiceitems[i].getTax2Name();
                if (temp && temp.trim().length > 0)
                {
                    if (name && name.length > 0)
                    {
                        if (name.toUpperCase() === temp.trim().toUpperCase())
                        {

                        } else {
                            name = "Tax 2";
                            break;
                        }
                    } else {
                        name = temp.trim();
                    }
                }
            }

        return name || 'Tax 2';
    },
    updateSummary: function() {
        this.getInvoiceSummary().updateSummary();
    },
    getInvoiceContainer: function() {
        return this.down('container[winkname=invoicecontainer]');
    },
    getSearchProductsContainer: function() {
        if (!WINK.Utilities.searchProductsContainer)
        {
            WINK.Utilities.searchProductsContainer = Ext.create('WINK.view.ProductSearchResultsPanel', {
                title: 'Product Seach',
                iconCls: 'info'
            });
        }
        this.getInvoiceContainer().setActiveItem(WINK.Utilities.searchProductsContainer);
        return WINK.Utilities.searchProductsContainer;
    },
    searchProducts: function() {
        var searchProductField = this.down('textfield[winkname=searchProductField]');
        var v = searchProductField.getValue();
        if ((v != null) && (v.trim().length > 0))
        {
            console.log('looking for products with ' + searchProductField);
            this.getSearchProductsContainer().find(v);
        }
    },
    addAttachementToUI: function(upload) {
        var myPanel = Ext.create('Ext.Panel', {
            html: "<img width='95%' src='data:image/png;base64," + upload.get('data') + "'/>"
        });
        this.getAttachementCarousel().add(myPanel);
    },
    removeAttachementCarousel: function() {
        if (this.attachementCarousel)
        {
            this.getInvoiceContainer().remove(this.attachementCarousel);
            this.attachementCarousel = null;
        }
    },
    getAttachementCarousel: function() {
        if (!this.attachementCarousel)
        {
            this.attachementCarousel = Ext.create('Ext.Carousel', {
                defaults: {
                    styleHtmlContent: true
                },
                items: [
                ],
                iconCls: 'more', title: 'Attachment(s)'
            });
        }

        this.getInvoiceContainer().setActiveItem(this.attachementCarousel);
        return this.attachementCarousel;
    },
    browseProducts: function() {

        this.getSearchProductsContainer().browse();
    },
    uploadImage: function(image) {
        console.info('uploading image...');
        var me = this;
        WINK.Utilities.showWorking();
        var newUpload = Ext.create('WINK.model.Upload', {
            'data': image, 'mimetype': 'image/png'
        });
        newUpload.save({
            success: function(response) {
                console.info('upload image done: ' + newUpload.get('id'));
                var newInvoiceAttachement = Ext.create('WINK.model.InvoiceAttachement', {'uploads_iduploads': newUpload.get('id')
                });
                this.patientinvoice.invoiceattachements_patientinvoice_idpatientinvoice().add(newInvoiceAttachement);
                this.addAttachementToUI(newUpload);
            },
            failure: function(response) {
                console.info('upload image error!');
                Ext.Msg.alert('Image Upload Failed', 'Something went wrong! Please try again.', Ext.emptyFn);
            },
            callback: function(options, success, response) {
                WINK.Utilities.hideWorking();
            }

        }, this);
    },
    config: {
        layout: 'hbox',
        centered: false,
        // modal: false,
        scrollable: false,
        items: [
            {
                xtype: 'toolbar', winkname: 'quicksaletitlebar',
                title: 'Quicksale',
                docked: 'top',
                items: [
                    {
                        text: 'Back',
                        ui: 'back',
                        action: 'goBack'
                    }

                ]
            },
            {
                xtype: 'container',
                flex: 1,
                layout: 'fit',
                items: [
                    {
                        xtype: 'container',
                        title: 'Invoice',
                        iconCls: 'info',
                        layout: 'vbox', items: [
                            {
                                xtype: 'container',
                                border: '0 0 1 0',
                                height: 65,
                                style: 'background:rgb(215,224,231); border-style:solid; border-color: darkgrey;',
                                layout: {
                                    type: 'hbox',
                                    align: 'center'
                                },
                                items: [
                                    {
                                        xtype: 'label',
                                        name: 'id',
                                        readOnly: true,
                                        html: '',
                                        margin: '0 2 0 20',
                                        style: 'font-size:15px; font-family:"open sans"',
                                        flex: 1
                                    },
                                    {
                                        xtype: 'segmentedbutton',
                                        margin: '5 5 5 5',
                                        allowToggle: false,
                                        items: [
                                            {
                                                xtype: 'button',
                                                text: 'Cam',
                                                cls: 'buttonSquare',
                                                height: 45,
                                                width: 70,
                                                handler: function(btn) {
                                                    var invoicePanel = btn.up('InvoicePanel');
                                                    Ext.device.Camera.capture({
                                                        success: function(image) {
                                                            invoicePanel.uploadImage(image);
                                                        },
                                                        quality: 75,
                                                        scope: invoicePanel,
                                                        source: 'camera',
                                                        destination: 'data',
                                                        encoding: 'png'
                                                    });
                                                }

                                            },
                                            {
                                                xtype: 'button',
                                                text: 'Lib',
                                                cls: 'buttonSquare',
                                                height: 45,
                                                width: 70,
                                                handler: function(btn) {
                                                    var invoicePanel = btn.up('InvoicePanel');
                                                    Ext.device.Camera.capture({
                                                        success: function(image) {
                                                            invoicePanel.uploadImage(image);
                                                        },
                                                        quality: 75,
                                                        scope: invoicePanel,
                                                        source: 'library',
                                                        destination: 'data',
                                                        encoding: 'png'
                                                    });
                                                }

                                            },
                                            {
                                                xtype: 'button',
                                                text: 'Attachment',
                                                hidden: true}
                                        ]
                                    }

                                ]


                            },
                            {
                                xtype: 'container',
                                border: '1 0 0 0',
                                height: 65,
                                layout: 'hbox',
                                items: [
                                    {
                                        xtype: 'container',
                                        flex: 0,
                                        border: '0 1 0 0',
                                        padding: '0 30 0 10',
                                        style: 'background:rgb(222,238,252); border-style:solid; border-color: darkgrey;',
                                        layout: {
                                            type: 'hbox',
                                            align: 'center',
                                            pack: 'center'
                                        },
                                        items: [
                                            {
                                                xtype: 'textfield',
                                                cls: 'inputBorder',
                                                height: 40,
                                                margin: '2 0 2 2',
                                                width: 200,
                                                label: '',
                                                placeHolder: 'Item',
                                                winkname: 'searchProductField'
                                            },
                                            {
                                                xtype: 'button',
                                                cls: 'buttonSquare',
                                                height: 45,
                                                margin: '2 2 2 0',
                                                ui: 'action',
                                                text: 'Search',
                                                handler: function(btn) {
                                                    btn.up('InvoicePanel').searchProducts();
                                                }
                                            },
                                            {
                                                xtype: 'button',
                                                cls: 'buttonSquare',
                                                height: 45,
                                                itemId: 'mybutton58',
                                                margin: '0 0 0 5',
                                                ui: 'confirm',
                                                text: 'Browse',
                                                handler: function(btn) {
                                                    btn.up('InvoicePanel').browseProducts();
                                                }
                                            }
                                        ]
                                    },
                                    {
                                        xtype: 'container',
                                        flex: 1,
                                        border: 0,
                                        padding: '0 0 0 10',
                                        style: 'background:#DDE9D2; border-style:solid; border-color: darkgrey;',
                                        layout: {
                                            type: 'hbox',
                                            align: 'center'
                                        },
                                        items: [
                                            {
                                                xtype: 'container',
                                                flex: 1
                                            },
                                            {
                                                xtype: 'segmentedbutton',
                                                margin: '5 5 5 5',
                                                allowToggle: false,
                                                winkname: 'addworksheetbuttons',
                                                items: [
                                                    {
                                                        xtype: 'button',
                                                        itemId: 'mybutton17',
                                                        text: '+ Rx',
                                                        cls: 'buttonSquare',
                                                        height: 45,
                                                        width: 70,
                                                        handler: function(button, event) {
                                                            button.up('InvoicePanel').newRxWorksheet();
                                                        }
                                                    },
                                                    {
                                                        xtype: 'button',
                                                        text: '+ CL',
                                                        cls: 'buttonSquare',
                                                        height: 45,
                                                        width: 70

                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                xtype: 'container',
                                border: '1 0 1 0',
                                style: 'background:rgb(248,248,248); border-style:solid; border-color: darkgrey;',
                                layout: 'hbox',
                                winkname: 'invoiceitemsheader',
                                items: [
                                    {
                                        xtype: 'label',
                                        flex: 1,
                                        html: '',
                                        margin: '5 2 0 5'
                                    },
                                    {
                                        xtype: 'label',
                                        html: 'Qty',
                                        margin: '5 2 0 0',
                                        width: 100
                                    },
                                    {
                                        xtype: 'label',
                                        html: 'Unit Price',
                                        margin: '5 2 0 0',
                                        width: 100
                                    },
                                    {
                                        xtype: 'label',
                                        html: 'Tax',
                                        margin: '5 2 0 0',
                                        width: 100
                                    },
                                    {
                                        xtype: 'label',
                                        html: 'Discount',
                                        margin: '5 2 0 0', width: 100
                                    },
                                    {
                                        xtype: 'label',
                                        html: 'Total',
                                        margin: '5 2 0 0',
                                        width: 100
                                    },
                                    {
                                        xtype: 'label',
                                        html: '',
                                        margin: '5 2 0 0',
                                        width: 50
                                    }
                                ]
                            },
                            {
                                xtype: 'container',
                                border: '1 0 1 0',
                                style: 'background:rgb(248,248,248); border-style:solid; border-color: darkgrey;',
                                layout: 'hbox',
                                winkname: 'paymentsheader',
                                hidden: true,
                                items: [
                                    {
                                        xtype: 'label',
                                        html: 'Date',
                                        margin: '5 2 0 2',
                                        width: 150
                                    },
                                    {
                                        xtype: 'label',
                                        html: 'Method',
                                        margin: '5 2 0 0',
                                        width: 150
                                    },
                                    {
                                        xtype: 'label', flex: 1,
                                        html: 'Description',
                                        margin: '5 2 0 0'
                                    },
                                    {
                                        xtype: 'label',
                                        html: 'Amount',
                                        margin: '5 2 0 0',
                                        width: 100
                                    },
                                    {
                                        xtype: 'label',
                                        html: '',
                                        margin: '5 2 0 2',
                                        width: 50
                                    }
                                ]
                            },
                            {
                                xtype: 'tabpanel',
                                flex: 1,
                                scrollable: false, style: 'background-color: #ffffff; border-style:solid!important; border:1px; border-color: darkgrey;',
                                winkname: 'invoicecontainer',
                                tabBar: {
                                    docked: 'bottom',
                                    ui: 'light'
                                },
                                listeners: {
                                    activeitemchange: function(tabpanel, value, oldValue, eOpts) {
                                        console.log('InvoicePanel tabpanel activeitemchange');
                                        if (value instanceof WINK.view.JobStatusPanel)
                                        {
                                            value.loadStatusOnce();
                                        }
                                        if (value === tabpanel.down('container[winkname=invoiceitemscontainer]'))
                                        {
                                            tabpanel.up('InvoicePanel').down('container[winkname=invoiceitemsheader]').show();
                                        } else {
                                            tabpanel.up('InvoicePanel').down('container[winkname=invoiceitemsheader]').hide();
                                        }
                                        if (value === tabpanel.down('container[winkname=invoicepaymentscontainer]'))
                                        {
                                            tabpanel.up('InvoicePanel').down('container[winkname=paymentsheader]').show();
                                        } else {
                                            tabpanel.up('InvoicePanel').down('container[winkname=paymentsheader]').hide();
                                        }

                                    }
                                },
                                items: [
                                    {
                                        xtype: 'container',
                                        style: 'background-color: #ffffff; border-style:solid!important; border:1px; border-color: darkgrey;',
                                        layout: {
                                            type: 'vbox'
                                        },
                                        scrollable: 'vertical',
                                        iconCls: 'more',
                                        title: 'Items Sold',
                                        winkname: 'invoiceitemscontainer'
                                    },
                                    {
                                        xtype: 'container',
                                        style: 'background-color: #ffffff; border-style:solid!important; border:1px; border-color: darkgrey;',
                                        layout: {
                                            type: 'vbox'
                                        },
                                        scrollable: 'vertical',
                                        iconCls: 'more',
                                        title: 'Payment(s)',
                                        winkname: 'invoicepaymentscontainer'
                                    },
                                    {
                                        xtype: 'jobstatuspanel',
                                        title: 'Job Status',
                                        iconCls: 'settings'
                                    }
                                ] //tab panel items
                            } //tab panel
                        ]
                    }
                ]
            },
            {
                xtype: 'InvoiceSummary'
            }
        ]

    },
    newRxWorksheet: function() {
        var newRxModel = Ext.create('WINK.model.RxWorksheet');
        this.patientinvoice.rxworksheets_patientinvoice_idpatientinvoice().add(newRxModel);
        tabPanel.setActiveItem(this.addRxWorksheet());
    },
    removeRxWorksheets: function(){
         var tabPanel = this.down("tabpanel");
         while(true){
             var rxWorksheet = this.down("RxWorksheetPanel");
             if(!rxWorksheet)
                 return;
             tabPanel.remove(rxWorksheet);
         }
    },
    addRxWorksheet: function(rxWorksheetModel) {
        var title = "New Rx";
        if (rxWorksheetModel.get('id') > 0)
        {
            title = "R" + rxWorksheetModel.get('id');
        }
        var newSheet = Ext.create('WINK.view.RxWorksheetPanel', {
            title: title
        });
        var tabPanel = this.down("tabpanel");
        tabPanel.add(newSheet);
        newSheet.loadRxWorksheet(rxWorksheetModel); // call after adding it to the UI, or else it doenst load

        return  newSheet;
    }

});