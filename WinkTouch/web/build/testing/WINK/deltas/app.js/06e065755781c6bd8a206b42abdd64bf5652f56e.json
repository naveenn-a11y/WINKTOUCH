["function _76064204a495d7edc7da7db02599cc90ce31cdb6(){};",258927,37,92,1048484,1048576,1048576,2097152,495332,"\"getAccountId->devid:\"",2592495,626,"console.log('UUID Authorization response.'",2593065,370,"console.log('UUID Authorization accountid",2593677,65,"console.log('UUID Authorization accountid: callbackAccountId?'",526624,36,2593632,173,"onsole.log('UUID Authorization accountid: callbackAccountId!'",526624,36,2593800,556,"alert('UUID Authorization Failed. Please Try Again.'",194416,32,2594048,80,"},\r\n    ",2597979,68,2594512,106,"console.log(\"!devid, using url param\");\r\n",2590235,35,2594633,78,"console.log(\"WINK.Utilities.accountid=\"",2593679,47,"}\r\n    ",2592351,43," {\r\n",2590235,35,2594957,221896,2817947,1303,2967273,36,"function(self) {\r\n                self.down('label').setHtml(WINK.Utilities.getDeviceID()",273424,39,2939472,49,"title",2145056,32,2819336,12269,2963599,207,2848729,523,2816853,1094,2831619,16903,2999136,554,2849792,156524,"console.log('app.js launch');\r\n        if (typeof String.prototype.startsWith !== 'function') {\r\n            // see below for better implementation!\r\n            String.prototype.startsWith = function(str",225295,33,"indexOf(str) === 0",1016352,34,"    Ext.Ajax.cors = true;\r\n        Ext.Ajax.useDefaultXhrHeader = false;\r\n        Ext.Ajax",1144455,34,"Ext.data.proxy.Ajax.useDefaultXhrHeader = false;\r\n        Ext.data.proxy.Ajax",1144455,34,"Ext.data.validations.length =",1956144,36,"    var length = value ? value.length : 0,\r\n    ",1956300,43,"    max = config.max;\r\n    ",1956362,75,105712,32,361662,32,"true",122303,34,1296694,33,"showAnimation = false;\r\n   ",129799,40,"\r\n            console.log('WINK.JSON, encode date');\r\n            function f(n) {\r\n                return n < 10 ? '0' + n : n",172768,37,"\"\\\"\" + d.valueOf() + \" \" + d.getFullYear() + '-' + f(d.getMonth() + 1) + '-' + f(d.getDate()) + ' ' + f(d.getHours()) + ':' + f(d.getMinutes()) + ':' + f(d.getSeconds()) + \"\\\"\";\r\n        };\r\n        Ext.data.writer.Json.override(",1164189,33,"This function overrides the default implementation of json writer. Any hasMany relationships will be submitted\n             * as nested objects. When preparing the data, only children which have been newly created, modified or marked for\n             * deletion will be added. To do this, a depth first bottom -> up recursive technique was used.\n             */\r\n        ",1546891,47,"        //Setup variables\r\n                console.log(\"getRecordData\");",219355,54,"i, association, childStore,\r\n                    data = record.data;\r\n                //Iterate over all the hasMany associations\r\n",1902127,32,"record.association",2910064,34,"    association = record.associations.get(i);\r\n                    var n",1760021,42,"        console.log(i + \" association \" + name + \" \" + association.getType());\r\n                    if (association.getTyp",1693566,46,"console.log(name + \" \" +",1525602,32,");",1548243,39,"null;\r\n                        childStore = record[name]();",2888837,34,"log(\"child store:\" + childStore);\r\n                        //Iterate over all the children in the current association\r\n                        child",2895653,48,"                console.log(\"child",2895758,40,"                    if (!data",2496864,35,"        data[name] = [",241520,32,661999,33,"Recursively get the record data for children (depth first)\r\n",2358643,32,"childData = this.getRecordData.call(this, childRecor",1761664,33,"/*\n                             * If the child was marked dirty or phantom it must be added. If there was data returned that was neither\n                             * dirty or phantom, this means that the depth first recursion has detected that it has a child which is\n                             * either dirty or phantom. For this child to be put into the prepared data, it's parents must be in place whether\n                             * they were modified or not.\n                             * \n                             * With WINK, we always send back all the data\n        ",1894954,45,"        if (true | childRecord.dirty | childRecord.phantom | (childData != null",2461776,38,"data[name].push(childDat",195312,33,"    record.setDirty",2859104,61,", me);\r\n    ",1911405,44,"    * Iterate over all the removed records and add them to the preparedData. Set a flag on them to show that\n                         * they are to be deleted\n    ",1894954,45,"    Ext.each(childStore.getRemovedRecords(), function(removedChildRecord",105376,33,"//Set a flag here to identify removed records",93584,34,"!data",2496864,35,"        data[name] = [",241520,32,"}",212817,32,"movedChildRecord.set('forDeletion', ",1911968,32,"    var removedChildData = this.getRecordData.call(this, removedChildRecor",1761664,33,"data[name].push(removedChildDat",195312,33,"record.setDirty();\r\n        ",2468953,41,108800,42,"//Only return data if it was dirty, new or marked for deletion.\r\n                if (true | record.dirty | record.phantom | record.get('forDeletion'",1589664,33,"data",61024,45,"});\r\n        // Destroy the #appLoadingIndicator element\r\n        console.log('get account id');\r\n",2589606,36,2838291,39,"get account id --> callback');\r\n            console.log('app.js get Account id callback');\r\n            var s1 =",2590968,32,"tore', {",2591113,141,2965574,56,2598431,40,2809744,48,74560,32,");\r\n            s1.load();\r\n            var s2 = Ext.creat",2808600,37,2591119,125,"stores",2965573,57,2598431,40,2809744,48,74560,32,");\r\n            s2.load();\r\n    ",3006341,55,"        // Initialize the main view\r\n            Ext.Viewport.add(Ext.create('WINK.view.ParentView'), {\r\n                fullscreen",***REMOVED***4800,37,"Ext.Viewport.add(Ext.create('WINK.view.PleaseWaitPanel')",1152391,33,"dated: function() {\r\n",338510,33,2806576,38,2810864,526,3007026,6453]